Description: CloudFormation template for creating an EMR cluster
Outputs:
  StackName:
    Value: !Ref 'AWS::StackName'
  EMRClusterID:
    Value: !GetAtt 'LaunchKerberizedCluster.ClusterID'
    Description: EMR cluster ID
  EMRClusterURL:
    Value: !GetAtt 'emrWaitCondition.Data'
    Description: EMR master node URL
Parameters:
  DBHostName:
    Description: HostName of the database
    Type: String
  DBUserName:
    Description: ' The RDS MySQL database username'
    Type: String
    Default: root
    AllowedValues:
    - root
  DBRootPassword:
    Description: ' The RDS MySQL database password'
    MaxLength: '41'
    MinLength: '8'
    NoEcho: 'true'
    Type: String
  DomainDNSName:
    AllowedPattern: '[a-zA-Z0-9\-]+\..+'
    Default: awsemr.com
    Description: The Active Directory domain that you want to establish the cross-realm
      trust with e.g., awsemr.com
    MaxLength: '25'
    MinLength: '3'
    Type: String
  LDAPSearchBase:
    Description: Ldap group search
    Type: String
    Default: dc=awsemr,dc=com
    AllowedValues:
      - dc=awsemr,dc=com
  myDirectoryBindUser:
    Description: BindUser Simple AD server
    Type: String
    Default: binduser@awsemr.com
  myDirectoryBindPassword:
    Description: BindPassword Simple AD server
    Type: String
  AppsEMR:
    Description: 'Comma separated list of applications to install on the cluster e.g., '
    Type: String
    Default: Hadoop, Spark, Hive, Livy, Hue
  MasterInstanceCount:
    Default: '3'
    Description: Number of core instances
    Type: Number
  CoreInstanceCount:
    Default: '4'
    Description: Number of core instances
    Type: Number
  CoreInstanceType:
    Default: m5.2xlarge
    Description: Instance Type of the core node
    Type: String
  EMRClusterName:
    Default: EMR-EMRSecurityWithRangerV1
    Description: Cluster name for the EMR
    Type: String
  EMRLogDir:
    Description: Log Dir for the EMR cluster
    Type: String
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH to the instances
    Type: AWS::EC2::KeyPair::KeyName
  LDAPServerIP:
    Description: IP address of the LDAP server
    Type: String
  MasterInstanceType:
    Default: m5.xlarge
    Description: Instance Type of the master node
    Type: String
  RangerHostname:
    Description: Internal IP address of the Ranger Server
    Type: String
  Subnet:
    Description: Subnet ID for creating the EMR cluster
    Type: AWS::EC2::Subnet::Id
  VPC:
    Description: VPC ID for creating the EMR cluster
    Type: AWS::EC2::VPC::Id
  emrReleaseLabel:
    Default: emr-5.29.0
    AllowedValues:
      - emr-5.0.0
      - emr-5.4.0
      - emr-5.16.0
      - emr-5.17.0
      - emr-5.26.0
      - emr-5.27.0
      - emr-5.28.0
      - emr-5.28.1
      - emr-5.29.0
      - emr-6.0.0
    Description: Release label for the EMR cluster
    Type: String
  rangerVersion:
    Default: '2.0'
    Description: Version of the Ranger Server.
    Type: String
    AllowedValues:
      - '0.6'
      - '0.7'
      - '1.0'
      - '2.0'
  S3Bucket:
    Description: S3Bucket where artifacts are stored
    Type: String
    Default: aws-bigdata-blog
  S3Key:
    Description: S3Key of the Lambda code
    Type: String
Conditions:
  emr-5.4: !Equals
    - !Ref 'emrReleaseLabel'
    - emr-5.4.0
  emr-5.0: !Equals
    - !Ref 'emrReleaseLabel'
    - emr-5.0.0
  emr-5.16: !Equals
    - !Ref 'emrReleaseLabel'
    - emr-5.16.0
  emr-5.17: !Equals
    - !Ref 'emrReleaseLabel'
    - emr-5.17.0
  emr-5.20: !Equals
    - !Ref 'emrReleaseLabel'
    - emr-5.20.0
  emr-5.29: !Equals
    - !Ref 'emrReleaseLabel'
    - emr-5.29.0
  emr-6.0: !Equals
    - !Ref 'emrReleaseLabel'
    - emr-6.0.0
  OlderEmrVersion: !Or
    - !Condition 'emr-5.0'
    - !Condition 'emr-5.4'
Resources:
  EmrServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - elasticmapreduce.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole
  EmrEc2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforEC2Role
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
  EMRInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref 'EmrEc2Role'
  KMSKey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - :root
            Action: kms:*
            Resource: '*'
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !GetAtt 'EmrEc2Role.Arn'
            Action: kms:*
            Resource: '*'

  SecurityConfiguration:
    Type: AWS::EMR::SecurityConfiguration
    Properties:
      SecurityConfiguration:
        EncryptionConfiguration:
          EnableAtRestEncryption: true
          EnableInTransitEncryption: true
          AtRestEncryptionConfiguration:
            S3EncryptionConfiguration:
              EncryptionMode: SSE-S3
            LocalDiskEncryptionConfiguration:
              EncryptionKeyProviderType: AwsKms
              AwsKmsKey: !GetAtt 'KMSKey.Arn'
          InTransitEncryptionConfiguration:
            TLSCertificateConfiguration:
              CertificateProviderType: PEM
              S3Object: !Join ['', ["s3://", !Ref S3Bucket, "/", !Ref S3Key,
                                    '/emr-tls/emr-certs.zip']]
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonElasticMapReduceFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
  LaunchEMRClusterFunction:
    Type: AWS::Lambda::Function
    DependsOn: LambdaExecutionRole
    Properties:
      Handler: cremr.handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Join ['', [!Ref S3Key,
                           '/launch-cluster.zip']]
      Runtime: python3.6
      Timeout: '300'
  LaunchKerberizedCluster:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: LaunchEMRClusterFunction
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'LaunchEMRClusterFunction.Arn'
      SignalURL: !Ref 'emrCreateWaitHandle'
      loglevel: info
      subnetID: !Ref 'Subnet'
      JobFlowRole: !Ref 'EMRInstanceProfile'
      ServiceRole: !Ref 'EmrServiceRole'
      S3Bucket: !Ref 'S3Bucket'
      S3Key: !Ref 'S3Key'
      EMRSecurityConfig: !Ref 'SecurityConfiguration'
      LogFolder: !Ref EMRLogDir
      KeyName: !Ref 'KeyName'
      StackName: !Ref 'AWS::StackName'
      StackRegion: !Ref 'AWS::Region'
      EnableKerberos: "false"
      ADDomainUser: !Ref 'myDirectoryBindUser'
      ADDomainUserPassword: !Ref 'myDirectoryBindPassword'
      MasterInstanceCount: !Ref 'MasterInstanceCount'
      CoreInstanceCount: !Ref 'CoreInstanceCount'
      TypeOfInstance: !Ref 'MasterInstanceType'
      AppsEMR: !Ref 'AppsEMR'
      emrReleaseLabel: !Ref emrReleaseLabel
      DomainDNSName: !Ref 'DomainDNSName'
      LDAPSearchBase: !Ref 'LDAPSearchBase'
      LDAPHostPrivateIP: !Ref 'LDAPServerIP'
      RangerHostname: !Ref RangerHostname
      RangerVersion: !Ref rangerVersion
      DBHostName: !Ref DBHostName
      DBUserName: !Ref DBUserName
      DBRootPassword: !Ref DBRootPassword

  emrCreateWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
    Properties: {}
  emrWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: LaunchKerberizedCluster
    Properties:
      Handle: !Ref 'emrCreateWaitHandle'
      Timeout: '4500'
